1. SentenceAnalyzer
*Responsabilit√†: Analizzare la struttura sintattica della frase.

*Attributi:

	*inputText: String

	*parsedStructure: Object

*Metodi:

	*analyzeSyntax(): void

	*extractTerms(): List<Term>

	*validateSyntax(): Boolean

*2. WordDictionary
*Responsabilit√†: Gestire liste di parole (nouns, verbs, adjectives).

*Attributi:

	*words: List<String>

*Metodi:

	*loadWords(filepath: String): void

	*getRandomWord(): String

	*addWord(word: String): void

(Possibile estensione in sottoclassi NounDictionary, VerbDictionary, AdjectiveDictionary se vuoi modularit√† maggiore.)

*3. SentenceTemplate
*Responsabilit√†: Definire la struttura di una frase.

*Attributi:

	*templatePattern: String

*Metodi:

	*getPlaceholders(): List<String>

*4. SentenceGenerator
*Responsabilit√†: Generare una frase compilando un template.

*Attributi:

	*template: SentenceTemplate

	*dictionaries: Map<String, WordDictionary>

*Metodi:

	*generateSentence(): String

	*setTense(tense: String): void

*5. ToxicityValidator
*Responsabilit√†: Verificare la tossicit√† di una frase.

*Attributi:

	*toxicityThreshold: Float

*Metodi:

	*validate(text: String): Boolean

6. PersistenceManager
*Responsabilit√†: Salvare frasi e dati in file o storage.

*Attributi:

	*storagePath: String

*Metodi:

	*saveData(format: String, data: Object): void

üìà Relazioni principali:
	*SentenceGenerator usa WordDictionary e SentenceTemplate

	*SentenceGenerator collabora con ToxicityValidator

	*SentenceAnalyzer pu√≤ aggiornare WordDictionary

	*PersistenceManager salva dati prodotti da SentenceGenerator